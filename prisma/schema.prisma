generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model afk {
  userid  String  @db.VarChar
  text    String?
  since   Decimal @db.Decimal
  guildid String  @db.VarChar

  @@id([userid, guildid])
  @@index([userid, guildid])
}

model antispam {
  guildid              String         @id(map: "antispamsettings_pkey") @db.VarChar
  active               Boolean        @default(false)
  wluserid             String[]       @db.VarChar
  wlchannelid          String[]       @db.VarChar
  wlroleid             String[]       @db.VarChar
  forcedisabled        Boolean        @default(false)
  msgthreshold         Decimal        @default(10) @db.Decimal
  dupemsgthreshold     Decimal        @default(5) @db.Decimal
  timeout              Decimal        @default(15) @db.Decimal
  deletespam           Boolean        @default(true)
  action               PunishmentType @default(warn)
  deletemessageseconds Decimal        @default(604800) @db.Decimal
  duration             Decimal        @default(3600) @db.Decimal

  @@index([guildid])
}

model antivirus {
  guildid              String         @id @db.VarChar
  active               Boolean        @default(false)
  linklogging          Boolean        @default(false)
  linklogchannels      String[]       @db.VarChar
  action               PunishmentType @default(warn)
  deletemessageseconds Decimal        @default(604800) @db.Decimal
  duration             Decimal        @default(3600) @db.Decimal

  @@index([guildid])
}

model appealquestions {
  guildid         String     @db.VarChar
  uniquetimestamp Decimal    @id @db.Decimal
  active          Boolean    @default(false)
  question        String?
  answertype      AnswerType @default(paragraph)
  required        Boolean    @default(true)
  options         String[]

  @@index([guildid, uniquetimestamp])
}

model appeals {
  userid        String   @db.VarChar
  guildid       String   @db.VarChar
  questiontypes String[]
  answers       String[]
  punishmentid  Decimal  @db.Decimal
  questions     String[]

  @@id([userid, punishmentid])
  @@index([userid, punishmentid])
}

model appealsettings {
  guildid   String   @id @db.VarChar
  active    Boolean  @default(false)
  channelid String?  @db.VarChar
  bluserid  String[] @db.VarChar

  @@index([guildid])
}

model art {
  userid   String  @db.VarChar
  created  Decimal @id @db.Decimal
  url      String
  verified Boolean @default(false)
  type     ArtType @default(full)
  desc     String?

  @@index([created])
}

model autopunish {
  guildid              String                   @db.VarChar
  uniquetimestamp      Decimal                  @id @db.Decimal
  duration             Decimal                  @default(3600) @db.Decimal
  warnamount           Decimal?                 @db.Decimal
  active               Boolean                  @default(false)
  addroles             String[]                 @db.VarChar
  removeroles          String[]                 @db.VarChar
  deletemessageseconds Decimal                  @default(604800) @db.Decimal
  punishment           AutoPunishPunishmentType @default(warn)

  @@index([guildid, uniquetimestamp])
}

model autoroles {
  guildid    String   @id(map: "autorole_pkey") @db.VarChar
  active     Boolean  @default(false)
  botroleid  String[] @db.VarChar
  userroleid String[] @db.VarChar
  allroleid  String[] @db.VarChar

  @@index([guildid])
}

model balance {
  userid  String  @db.VarChar
  guildid String  @db.VarChar
  balance Decimal @default(0) @db.Decimal

  @@id([userid, guildid])
  @@index([userid, guildid])
}

model censor {
  active      Boolean  @default(false)
  guildid     String   @id @db.VarChar
  repostroles String[] @db.VarChar
  repostrules String[] @db.VarChar

  @@index([guildid])
}

model customroles {
  guildid String @db.VarChar
  userid  String @db.VarChar
  roleid  String @db.VarChar

  @@id([guildid, userid])
  @@index([guildid, userid])
}

model newlines {
  active               Boolean        @default(false)
  guildid              String         @id @db.VarChar
  maxnewlines          Decimal?       @db.Decimal
  wlroleid             String[]       @db.VarChar
  wlchannelid          String[]       @db.VarChar
  action               PunishmentType @default(warn)
  duration             Decimal        @default(3600) @db.Decimal
  deletemessageseconds Decimal        @default(604800) @db.Decimal

  @@index([guildid])
}

model invites {
  active               Boolean        @default(false)
  guildid              String         @id @db.VarChar
  wlroleid             String[]       @db.VarChar
  wlchannelid          String[]       @db.VarChar
  action               PunishmentType @default(warn)
  duration             Decimal        @default(3600) @db.Decimal
  deletemessageseconds Decimal        @default(604800) @db.Decimal

  @@index([guildid])
}

model buttonroles {
  uniquetimestamp Decimal  @id @db.Decimal
  roles           String[] @db.VarChar
  emote           String?  @db.VarChar
  text            String?
  active          Boolean  @default(false)
  guildid         String   @db.VarChar
  linkedid        Decimal? @db.Decimal

  @@index([guildid, uniquetimestamp])
}

model buttonrolesettings {
  guildid         String   @db.VarChar
  msgid           String?  @db.VarChar
  channelid       String?  @db.VarChar
  uniquetimestamp Decimal  @id @db.Decimal
  active          Boolean  @default(false)
  anyroles        String[] @db.VarChar
  onlyone         Boolean  @default(false)

  @@index([guildid, uniquetimestamp])
}

model contributers {
  userid String   @id @db.VarChar
  roles  String[] @db.VarChar
}

model cooldowns {
  command         String?
  cooldown        Decimal  @default(10) @db.Decimal
  active          Boolean  @default(false)
  wlchannelid     String[] @db.VarChar
  wlroleid        String[] @db.VarChar
  wluserid        String[] @db.VarChar
  activechannelid String[] @db.VarChar
  uniquetimestamp Decimal  @id @db.Decimal
  guildid         String   @db.VarChar

  @@index([guildid, uniquetimestamp])
}

model customembeds {
  color           String?
  title           String?
  url             String?
  authorname      String?
  authoriconurl   String?
  authorurl       String?
  description     String?
  thumbnail       String?
  fieldnames      String[]
  fieldvalues     String[]
  fieldinlines    Boolean[]
  image           String?
  footertext      String?
  footericonurl   String?
  uniquetimestamp Decimal   @id @db.Decimal
  guildid         String    @db.VarChar
  name            String
  timestamp       String?

  @@index([guildid, uniquetimestamp])
}

model disboard {
  guildid        String   @id @db.VarChar
  active         Boolean  @default(false)
  nextbump       Decimal? @db.Decimal
  channelid      String?  @db.VarChar
  repeatreminder Decimal  @default(600) @db.Decimal
  roles          String[] @db.VarChar
  users          String[] @db.VarChar
  tempchannelid  String?  @db.VarChar
  deletereply    Boolean  @default(false)
  msgid          String?  @db.VarChar
  repeatenabled  Boolean  @default(true)

  @@index([guildid])
}

model expiry {
  guildid         String   @id(map: "modsettings_pkey") @db.VarChar
  bans            Boolean  @default(false)
  channelbans     Boolean  @default(false)
  kicks           Boolean  @default(false)
  mutes           Boolean  @default(false)
  warns           Boolean  @default(false)
  banstime        Decimal? @db.Decimal
  channelbanstime Decimal? @db.Decimal
  kickstime       Decimal? @db.Decimal
  mutestime       Decimal? @db.Decimal
  warnstime       Decimal? @db.Decimal

  @@index([guildid])
}

model filterscraper {
  keyword    String
  filtertype Decimal @db.Decimal

  @@id([keyword, filtertype])
}

model giveawaycollection {
  msgid           String   @id @db.VarChar
  endtime         Decimal  @db.Decimal
  guildid         String   @db.VarChar
  replymsgid      String   @db.VarChar
  requiredwinners String[] @db.VarChar

  @@index([msgid])
}

model giveaways {
  guildid      String   @db.VarChar
  msgid        String   @id @db.VarChar
  description  String
  winnercount  Decimal  @db.Decimal
  endtime      Decimal  @db.Decimal
  reqrole      String?  @db.VarChar
  actualprize  String?
  host         String   @db.VarChar
  ended        Boolean  @default(false)
  channelid    String   @db.VarChar
  participants String[] @db.VarChar
  collecttime  Decimal? @db.Decimal
  failreroll   Boolean  @default(false)
  winners      String[] @db.VarChar
  claimingdone Boolean  @default(false)

  @@index([msgid])
}

model guilds {
  guildid     String  @id @db.VarChar
  name        String
  icon        String?
  banner      String?
  invite      String?
  membercount Decimal @default(2) @db.Decimal
  fetchat     Decimal @db.Decimal

  @@index([guildid])
}

model guildsettings {
  guildid           String   @id @db.VarChar
  prefix            String?
  interactionsmode  Boolean  @default(true)
  lan               String   @default("en-GB")
  errorchannel      String?  @db.VarChar
  enabledrp         Boolean  @default(false)
  rpenableruns      Decimal  @default(0) @db.Decimal
  lastrpsyncrun     Decimal? @db.Decimal
  ptreminderenabled Boolean  @default(true)
  legacyrp          Boolean  @default(false)
  appid             String?  @db.VarChar
  editrpcommands    Boolean  @default(true)
  publickey         String?
  token             String?  @db.VarChar
  enableinvitesat   Decimal? @db.Decimal
  statuschannel     String?  @db.VarChar
  updateschannel    String?

  @@index([guildid])
}

model level {
  userid     String    @db.VarChar
  guildid    String    @default("1") @db.VarChar
  type       LevelType
  xp         Decimal   @default(0) @db.Decimal
  level      Decimal   @default(0) @db.Decimal
  multiplier Decimal   @default(1) @db.Decimal

  @@id([userid, guildid, type])
  @@index([guildid])
}

model leveling {
  guildid         String      @id @db.VarChar
  active          Boolean     @default(true)
  xpmultiplier    Decimal     @default(1) @db.Decimal
  xppermsg        Decimal     @default(25) @db.Decimal
  rolemode        Boolean     @default(false)
  lvlupdeltimeout Decimal     @default(10) @db.Decimal
  lvlupchannels   String[]    @db.VarChar
  lvlupemotes     String[]    @default(["🆙", "AMayakopeek:924071140257841162"]) @db.VarChar
  embed           Decimal?    @db.Decimal
  ignoreprefixes  Boolean     @default(false)
  prefixes        String[]
  minwords        Decimal     @default(0) @db.Decimal
  lvlupmode       LevelUpMode @default(silent)
  blchannelid     String[]    @db.VarChar
  blroleid        String[]    @db.VarChar
  bluserid        String[]    @db.VarChar
  wlchannelid     String[]    @db.VarChar
  wlroleid        String[]    @db.VarChar
  wluserid        String[]    @db.VarChar

  @@index([guildid])
}

model levelingmultichannels {
  guildid         String   @db.VarChar
  channels        String[] @db.VarChar
  multiplier      Decimal  @default(1) @db.Decimal
  uniquetimestamp Decimal  @id(map: "levelingmultiplierchannels_pkey") @db.Decimal

  @@index([guildid, uniquetimestamp])
}

model levelingmultiroles {
  guildid         String   @db.VarChar
  roles           String[] @db.VarChar
  multiplier      Decimal? @db.Decimal
  uniquetimestamp Decimal  @id(map: "levelingmultiplierroles_pkey") @db.Decimal

  @@index([guildid, uniquetimestamp])
}

model levelingroles {
  guildid         String   @db.VarChar
  level           Decimal? @db.Decimal
  roles           String[] @db.VarChar
  uniquetimestamp Decimal  @id @db.Decimal

  @@index([guildid, uniquetimestamp])
}

model levelingruleschannels {
  guildid               String   @db.VarChar
  channels              String[] @db.VarChar
  uniquetimestamp       Decimal  @id @db.Decimal
  hasleastattachments   Decimal? @db.Decimal
  hasmostattachments    Decimal? @db.Decimal
  hasleastcharacters    Decimal? @db.Decimal
  hasmostcharacters     Decimal? @db.Decimal
  hasleastwords         Decimal? @db.Decimal
  hasmostwords          Decimal? @db.Decimal
  mentionsleastusers    Decimal? @db.Decimal
  mentionsmostusers     Decimal? @db.Decimal
  mentionsleastchannels Decimal? @db.Decimal
  mentionsmostchannels  Decimal? @db.Decimal
  mentionsleastroles    Decimal? @db.Decimal
  mentionsmostroles     Decimal? @db.Decimal
  hasleastlinks         Decimal? @db.Decimal
  hasmostlinks          Decimal? @db.Decimal
  hasleastemotes        Decimal? @db.Decimal
  hasmostemotes         Decimal? @db.Decimal
  hasleastmentions      Decimal? @db.Decimal
  hasmostmentions       Decimal? @db.Decimal

  @@index([guildid, uniquetimestamp])
}

model logchannels {
  guildid              String   @id @db.VarChar
  applicationevents    String[] @db.VarChar
  automodevents        String[] @db.VarChar
  channelevents        String[] @db.VarChar
  emojievents          String[] @db.VarChar
  guildevents          String[] @db.VarChar
  scheduledeventevents String[] @db.VarChar
  inviteevents         String[] @db.VarChar
  messageevents        String[] @db.VarChar
  roleevents           String[] @db.VarChar
  stageevents          String[] @db.VarChar
  stickerevents        String[] @db.VarChar
  typingevents         String[] @db.VarChar
  userevents           String[] @db.VarChar
  voiceevents          String[] @db.VarChar
  webhookevents        String[] @db.VarChar
  settingslog          String[] @db.VarChar
  modlog               String[] @db.VarChar
  memberevents         String[] @db.VarChar

  @@index([guildid])
}

model nitroroles {
  guildid         String   @db.VarChar
  uniquetimestamp Decimal  @id @db.Decimal
  roles           String[] @db.VarChar
  days            Decimal? @db.Decimal

  @@index([guildid, uniquetimestamp])
}

model nitrosettings {
  guildid       String   @id @db.VarChar
  active        Boolean  @default(false)
  logchannels   String[] @db.VarChar
  rolemode      Boolean  @default(true)
  notifchannels String[] @db.VarChar
  notifembed    Decimal? @db.Decimal
  notification  Boolean  @default(false)

  @@index([guildid])
}

model nitrousers {
  guildid    String   @db.VarChar
  userid     String   @db.VarChar
  booststart Decimal  @id @db.Decimal
  boostend   Decimal? @db.Decimal

  @@index([guildid])
}

model punish_bans {
  guildid         String   @db.VarChar
  userid          String   @db.VarChar
  reason          String?
  uniquetimestamp Decimal  @id(map: "mutes_pkey") @db.Decimal
  channelid       String   @db.VarChar
  channelname     String
  executorid      String   @db.VarChar
  executorname    String
  duration        Decimal? @db.Decimal
  msgid           String   @db.VarChar

  @@index([guildid, uniquetimestamp, userid])
}

model punish_channelbans {
  guildid         String   @db.VarChar
  userid          String   @db.VarChar
  reason          String?
  uniquetimestamp Decimal  @id(map: "punish_channelban_pkey") @db.Decimal
  channelid       String   @db.VarChar
  channelname     String
  executorid      String   @db.VarChar
  executorname    String
  msgid           String   @db.VarChar
  banchannelid    String   @db.VarChar
  duration        Decimal? @db.Decimal

  @@index([guildid, uniquetimestamp, userid])
}

model punish_kicks {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String?
  uniquetimestamp Decimal @id @db.Decimal
  channelid       String  @db.VarChar
  channelname     String
  executorid      String  @db.VarChar
  executorname    String
  msgid           String  @db.VarChar

  @@index([guildid, uniquetimestamp, userid])
}

model punish_mutes {
  guildid         String   @db.VarChar
  userid          String   @db.VarChar
  reason          String?
  uniquetimestamp Decimal  @id @db.Decimal
  channelid       String   @db.VarChar
  channelname     String
  executorid      String   @db.VarChar
  executorname    String
  msgid           String   @db.VarChar
  duration        Decimal? @db.Decimal

  @@index([guildid, uniquetimestamp, userid])
}

model punish_tempbans {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String?
  uniquetimestamp Decimal @id @db.Decimal
  channelid       String  @db.VarChar
  channelname     String
  executorid      String  @db.VarChar
  executorname    String
  msgid           String  @db.VarChar
  duration        Decimal @db.Decimal

  @@index([guildid, userid])
}

model punish_tempchannelbans {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String?
  uniquetimestamp Decimal @id(map: "punish_tempchannelban_pkey") @db.Decimal
  channelid       String  @db.VarChar
  channelname     String
  executorid      String  @db.VarChar
  executorname    String
  msgid           String  @db.VarChar
  banchannelid    String  @db.VarChar
  duration        Decimal @db.Decimal

  @@index([guildid, uniquetimestamp, userid])
}

model punish_tempmutes {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String?
  uniquetimestamp Decimal @id @db.Decimal
  channelid       String  @db.VarChar
  channelname     String
  executorid      String  @db.VarChar
  executorname    String
  msgid           String  @db.VarChar
  duration        Decimal @db.Decimal

  @@index([guildid, userid])
}

model punish_warns {
  guildid         String  @db.VarChar
  userid          String  @db.VarChar
  reason          String?
  uniquetimestamp Decimal @id @db.Decimal
  channelid       String  @db.VarChar
  channelname     String
  executorid      String  @db.VarChar
  executorname    String
  msgid           String  @db.VarChar

  @@index([guildid, uniquetimestamp, userid])
}

model reactionroles {
  uniquetimestamp Decimal  @id(map: "rrreactions_pkey") @db.Decimal
  emote           String?  @db.VarChar
  roles           String[] @db.VarChar
  active          Boolean  @default(false)
  guildid         String   @db.VarChar
  linkedid        Decimal? @db.Decimal

  @@index([guildid, uniquetimestamp])
}

model reactionrolesettings {
  guildid         String   @db.VarChar
  msgid           String?  @db.VarChar
  uniquetimestamp Decimal  @id(map: "rrsettings_pkey") @db.Decimal
  active          Boolean  @default(false)
  anyroles        String[] @db.VarChar
  channelid       String?  @db.VarChar

  @@index([guildid, uniquetimestamp])
}

model reminders {
  userid          String  @db.VarChar
  channelid       String  @db.VarChar
  reason          String
  uniquetimestamp Decimal @id @db.Decimal
  endtime         Decimal @db.Decimal

  @@index([userid, uniquetimestamp])
}

model reviews {
  userid   String  @id @db.VarChar
  score    Decimal @default(1) @db.Decimal
  content  String
  fetchat  Decimal @db.Decimal
  username String
  avatar   String?

  @@index([userid])
}

model rolerewards {
  guildid         String   @db.VarChar
  uniquetimestamp Decimal  @id @db.Decimal
  active          Boolean  @default(false)
  customrole      Boolean  @default(false)
  xpmultiplier    Decimal? @db.Decimal
  currency        Decimal? @db.Decimal
  roles           String[] @db.VarChar
  cansetcolor     Boolean  @default(true)
  canseticon      Boolean  @default(true)
  positionrole    String?
  blroleid        String[] @db.VarChar
  bluserid        String[] @db.VarChar

  @@index([guildid, uniquetimestamp])
}

model roleseparator {
  guildid         String   @db.VarChar
  separator       String?  @db.VarChar
  active          Boolean  @default(false)
  stoprole        String?  @db.VarChar
  isvarying       Boolean  @default(false)
  roles           String[] @db.VarChar
  uniquetimestamp Decimal  @id @db.Decimal

  @@index([guildid, uniquetimestamp])
}

model roleseparatorsettings {
  guildid      String   @id @db.VarChar
  stillrunning Boolean
  channelid    String?  @db.VarChar
  messageid    String?  @db.VarChar
  duration     Decimal? @db.Decimal
  startat      Decimal? @db.Decimal
  index        Decimal? @db.Decimal
  length       Decimal? @db.Decimal

  @@index([guildid])
}

model selfroles {
  guildid         String   @db.VarChar
  roles           String[] @db.VarChar
  onlyone         Boolean  @default(false)
  uniquetimestamp Decimal  @id @db.Decimal
  active          Boolean  @default(false)
  name            String   @default("Change me")
  blroleid        String[] @db.VarChar
  bluserid        String[] @db.VarChar
  wlroleid        String[] @db.VarChar
  wluserid        String[] @db.VarChar

  @@index([guildid, uniquetimestamp])
}

model stats {
  usercount    Decimal  @id @db.Decimal
  guildcount   Decimal  @db.Decimal
  channelcount Decimal  @db.Decimal
  rolecount    Decimal  @db.Decimal
  allusers     Decimal  @db.Decimal
  willis       String[]
}

model sticky {
  guildid           String   @id @db.VarChar
  roles             String[] @db.VarChar
  stickyrolesmode   Boolean  @default(true)
  stickyrolesactive Boolean  @default(false)
  stickypermsactive Boolean  @default(false)

  @@index([guildid])
}

model stickymessages {
  guildid   String @db.VarChar
  lastmsgid String @db.VarChar
  channelid String @id @db.VarChar
  userid    String @db.VarChar

  @@index([guildid])
}

model stickypermmembers {
  userid    String @db.VarChar
  guildid   String @db.VarChar
  channelid String @db.VarChar
  denybits  BigInt @default(0)
  allowbits BigInt @default(0)

  @@id([userid, channelid])
  @@index([guildid])
}

model stickyrolemembers {
  userid  String   @db.VarChar
  guildid String   @db.VarChar
  roles   String[] @db.VarChar

  @@id([userid, guildid])
  @@index([guildid])
}

model suggestionsettings {
  guildid             String   @id @db.VarChar
  active              Boolean  @default(false)
  channelid           String?  @db.VarChar
  novoteroles         String[] @db.VarChar
  novoteusers         String[] @db.VarChar
  approverroleid      String[] @db.VarChar
  anonvote            Boolean  @default(false)
  nosendroles         String[] @db.VarChar
  nosendusers         String[] @db.VarChar
  anonsuggestion      Boolean  @default(false)
  pingroleid          String[] @db.VarChar
  pinguserid          String[] @db.VarChar
  deleteapproved      Boolean  @default(false)
  deleteapprovedafter Decimal  @default(86400) @db.Decimal
  deletedenied        Boolean  @default(false)
  deletedeniedafter   Decimal  @default(86400) @db.Decimal

  @@index([guildid])
}

model suggestionvotes {
  guildid   String   @db.VarChar
  msgid     String   @id @db.VarChar
  userid    String   @db.VarChar
  downvoted String[] @db.VarChar
  upvoted   String[] @db.VarChar
  approved  Boolean  @default(false)
  channelid String   @db.VarChar

  @@index([guildid])
}

model users {
  userid         String   @id @db.VarChar
  username       String   @default("Unkown User")
  avatar         String   @default("https://cdn.discordapp.com/embed/avatars/0.png")
  socials        String[]
  socialstype    String[]
  lastfetch      Decimal  @default(1) @db.Decimal
  email          String?
  refreshtoken   String?
  expires        Decimal? @db.Decimal
  accesstoken    String?
  ptremindersent Boolean  @default(false)
  votereminders  Boolean  @default(true)

  @@index([userid])
}

model blockedusers {
  userid        String   @db.VarChar
  blockeduserid String   @db.VarChar
  blockedcmd    String[]

  @@id([userid, blockeduserid])
  @@index([userid])
}

model verification {
  guildid      String  @id @db.VarChar
  logchannel   String? @db.VarChar
  finishedrole String? @db.VarChar
  pendingrole  String? @db.VarChar
  startchannel String? @db.VarChar
  selfstart    Boolean @default(false)
  kickafter    Decimal @default(600) @db.Decimal
  kicktof      Boolean @default(false)
  active       Boolean @default(false)

  @@index([guildid])
}

model voterewards {
  guildid            String      @db.VarChar
  uniquetimestamp    Decimal     @id @db.Decimal
  rewardroles        String[]    @db.VarChar
  rewardxpmultiplier Decimal?    @db.Decimal
  rewardcurrency     Decimal?    @db.Decimal
  rewardxp           Decimal?    @db.Decimal
  active             Boolean     @default(false)
  linkedid           Decimal?    @db.Decimal
  weekends           WeekendType @default(everyDay)

  @@index([guildid, uniquetimestamp])
}

model votes {
  guildid        String                @db.VarChar
  userid         String                @db.VarChar
  endtime        Decimal               @unique @db.Decimal
  votetype       VoteType
  voted          String                @db.VarChar
  relatedsetting Decimal               @db.Decimal
  votes          votesappliedrewards[]

  @@id([guildid, userid, voted])
  @@index([guildid])
}

model votesappliedrewards {
  voted              String   @db.VarChar
  userid             String   @db.VarChar
  rewardroles        String[] @db.VarChar
  rewardxp           Decimal? @db.Decimal
  rewardcurrency     Decimal? @db.Decimal
  rewardxpmultiplier Decimal? @db.Decimal
  relatedvote        Decimal
  vote               votes    @relation(fields: [relatedvote], references: [endtime])

  @@id([userid, voted], map: "voters_pkey")
  @@index([relatedvote])
}

model votesettings {
  uniquetimestamp     Decimal  @id @db.Decimal
  guildid             String   @db.VarChar
  token               String?
  reminders           Boolean  @default(false)
  announcementchannel String?  @db.VarChar
  active              Boolean  @default(false)
  linkedid            Decimal? @db.Decimal
  name                String?

  @@index([guildid, uniquetimestamp])
}

model welcome {
  guildid   String   @id @db.VarChar
  channelid String?  @db.VarChar
  active    Boolean  @default(false)
  embed     Decimal? @db.Decimal
  pingroles String[] @db.VarChar
  pingusers String[] @db.VarChar
  pingjoin  Boolean  @default(false)

  @@index([guildid])
}

model deletethreads {
  guildid    String  @id @db.VarChar
  channelid  String  @db.VarChar
  deletetime Decimal @db.Decimal

  @@index([guildid])
}

model shop {
  guildid       String  @id @db.VarChar
  active        Boolean @default(false)
  currencyemote String?

  @@index([guildid])
}

model shopitems {
  guildid         String   @db.VarChar
  roles           String[] @db.VarChar
  price           Decimal? @db.Decimal
  uniquetimestamp Decimal  @id @db.Decimal
  shoptype        ShopType @default(command)
  buttontext      String?
  buttonemote     String?
  msgid           String?  @db.VarChar
  channelid       String?  @db.VarChar
  active          Boolean  @default(false)

  @@index([guildid, uniquetimestamp])
}

model shopusers {
  userid    String   @db.VarChar
  guildid   String   @db.VarChar
  boughtids String[] @db.VarChar

  @@id([userid, guildid])
  @@index([userid, guildid])
}

model voicehubs {
  guildid         String   @db.VarChar
  channelid       String?  @db.VarChar
  active          Boolean  @default(false)
  blroleid        String[] @db.VarChar
  bluserid        String[] @db.VarChar
  categoryid      String?  @db.VarChar
  uniquetimestamp Decimal  @id @db.Decimal
  wlroleid        String[] @db.VarChar
  wluserid        String[] @db.VarChar
  deletetime      Decimal  @default(3600) @db.Decimal
  private         Boolean  @default(true)

  @@index([guildid, uniquetimestamp])
}

model voicechannels {
  ownerid          String   @db.VarChar
  guildid          String   @db.VarChar
  channelid        String   @db.VarChar
  everyonelefttime Decimal? @db.Decimal
  hubid            String   @db.VarChar

  @@id([guildid, channelid])
  @@index([guildid, channelid])
}

model antiraid {
  guildid        String                 @id @db.VarChar
  active         Boolean                @default(false)
  posttof        Boolean                @default(false)
  pingroles      String[]               @db.VarChar
  pingusers      String[]               @db.VarChar
  timeout        Decimal                @default(15) @db.Decimal
  jointhreshold  Decimal                @default(5) @db.Decimal
  actiontof      Boolean                @default(true)
  action         AntiRaidPunishmentType @default(kick)
  postchannels   String[]               @db.VarChar
  disableinvites Boolean                @default(true)

  @@index([guildid])
}

model features {
  title       String @id @db.VarChar
  subtitle    String @db.VarChar
  image       String @db.VarChar
  placeholder String @db.VarChar

  @@index([title])
}

model heartbeats {
  ms    Decimal @db.Decimal
  shard Decimal @id @db.Decimal

  @@index([shard])
}

enum AutoPunishPunishmentType {
  warn
  kick
  tempmute
  ban
  tempban
  channelban
  tempchannelban
  softban
}

enum PunishmentType {
  warn
  kick
  tempmute
  ban
  tempban
  channelban
  tempchannelban
  strike
  softban
}

enum AntiRaidPunishmentType {
  kick
  ban
}

enum AnswerType {
  paragraph
  short
  number
  boolean
  multiple_choice
  single_choice
  text
}

enum LevelType {
  guild
  global
}

enum LevelUpMode {
  messages
  reactions
  silent
}

enum VoteType {
  guild
  bot
}

enum ShopType {
  command
  message
}

enum WeekendType {
  onlyOnWeekend
  onlyOnWeekdays
  everyDay
}

enum ArtType {
  full
  icon
  emoji
}
